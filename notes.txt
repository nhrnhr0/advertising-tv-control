



# deploy instructions:
https://okbaboularaoui.medium.com/how-to-set-up-django-with-postgres-nginx-and-daphne-django-channels-on-ubuntu-20-04-b0d24dcc7da9



# deploy insctructions only for django app:
https://arctype.com/blog/install-django-ubuntu/

create new ec2 instance
sudo apt-get install python3-pip python3-dev libpq-dev curl nginx -y
sudo systemctl start nginx
sudo systemctl enable nginx

sudo apt-get install postgresql postgresql-contrib -y
sudo su - postgres
psql

```
CREATE DATABASE 
	djangodb;
CREATE USER 
	djangouser 
	WITH PASSWORD 'WYCZY49xe9pcCV47E5EC';
```

```
ALTER ROLE djangouser 
	SET client_encoding 
	TO 'utf8';
ALTER ROLE djangouser 
	SET default_transaction_isolation 
	TO 'read committed';
ALTER ROLE djangouser 
	SET timezone 
	TO 'UTC+2';
GRANT ALL PRIVILEGES 
	ON DATABASE djangodb TO djangouser;
```

exit exit

pip3 install --upgrade pip
sudo apt install python3.8-venv
sudo apt install python3.8 python3.8-venv python3-venv

git clone https://github.com/nhrnhr0/advertising-tv-control.git
cd advertising-tv-control/
git checkout prod

 
python3 -m venv env 


# install and set supervisorctl 
# https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps
sudo apt update && sudo apt install supervisor
sudo nano /etc/supervisor/conf.d/goldtv.conf
copy the `setup/adv_tv_nginx` to the file
sudo apt-get -y install celery
sudo mkdir /var/log/celery
sudo mkdir /var/log/gunicorn
sudo mkdir /run/daphne/
sudo supervisorctl reread
sudo supervisorctl update

install certbot:
https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal

sudo cp /home/ubuntu/advertising-tv-control/goldTvDjangoNginx.conf /etc/nginx/conf.d/

install redis:
https://redis.io/docs/getting-started/installation/install-redis-on-linux/
sudo apt-get install redis-server	

# run celery on windows
 celery -A server beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler





# load database from file:
sudo su postgres
psql
(enter password)
DROP DATABASE kehiladb;
CREATE DATABASE kehiladb;
\q
exit
PGPASSWORD=<PASSWORD> psql -h localhost -d kehiladb -U djangouser -f <FILE>.sql





docker cp .\kehiladb_04-06-2023-14_38_04.sql adv_tv_control_postgres:/tmp/db.sql
docker exec -it adv_tv_control_postgres /bin/bash
        psql -h localhost -U adv_tv_control
		\c postgres
        DROP DATABASE adv_tv_control;
        CREATE DATABASE adv_tv_control;
        \q
PGPASSWORD=adv_tv_control psql -h localhost -U adv_tv_control -d adv_tv_control < /tmp/db.sql 

# Generated by Django 4.0 on 2023-08-07 07:08

from django.db import migrations

def create_default_pricing_plans(apps, schema_editor):
    PricingPlan = apps.get_model('tv', 'PriceingPlen')
    # name,price,description,plays_per_day,play_duration
	# בוסט לעסק במחיר מיוחד	999	20 שניות, 72 פעם ביום	72	20
	# הכי פשוט למכור	599	20 שניות, 36 פעם ביום	36	20
	# תודעה זה אנחנו	599	15 שניות, 48פעם ביום	48	15
	# העסק שלך בכל מקום	599	10 שניות, 72 פעם ביום	72	10
    obj1 = PricingPlan.objects.create(name='בוסט לעסק במחיר מיוחד', price=999, description='20 שניות, 72 פעם ביום', plays_per_day=72, play_duration=20)
    obj2 = PricingPlan.objects.create(name='הכי פשוט למכור', price=599, description='20 שניות, 36 פעם ביום', plays_per_day=36, play_duration=20)
    obj3 = PricingPlan.objects.create(name='תודעה זה אנחנו', price=599, description='15 שניות, 48פעם ביום', plays_per_day=48, play_duration=15)
    obj4 = PricingPlan.objects.create(name='העסק שלך בכל מקום', price=599, description='10 שניות, 72 פעם ביום', plays_per_day=72, play_duration=10)
    return obj1, obj2, obj3, obj4
def convert_broadcast_in_tvs_to_spot(apps, schema_editor):
    pricing_plans = create_default_pricing_plans(apps, schema_editor)
    
    Spot = apps.get_model('tv', 'Spot')
    bInTv = apps.get_model('tv', 'BroadcastInTvs')
    Asset = apps.get_model('tv', 'Asset')
    
    for broadcast_in_tvs in bInTv.objects.all():
        is_filler = broadcast_in_tvs.master
        if broadcast_in_tvs.activeSchedule:
            is_active_toggel = broadcast_in_tvs.activeSchedule.is_active_var
        else:
            is_active_toggel = False
        filler_duration = broadcast_in_tvs.duration
        publisher = broadcast_in_tvs.broadcast.publisher
        # load assets
        # media
        # media_type
        media = broadcast_in_tvs.broadcast.media
        media_type = broadcast_in_tvs.broadcast.media_type
        tvs = broadcast_in_tvs.tvs
        
        spot = Spot.objects.create(is_filler=is_filler, is_active_toggel=is_active_toggel, filler_duration=filler_duration, publisher=publisher, priceing_plan=pricing_plans[3])
        spot.tvs.set(tvs.all())
        # adding the assets
        # create new Asset
        asset = Asset.objects.create(media=media, media_type=media_type)
        asset.save()
        # add the asset to the spot
        spot.assets.add(asset)
        # save the spot
        spot.save()
class Migration(migrations.Migration):

    dependencies = [
        ('tv', '0046_alter_tvfotter_options_remove_tv_fotter_1_and_more'),
    ]

    operations = [
        migrations.RunPython(convert_broadcast_in_tvs_to_spot, reverse_code=migrations.RunPython.noop),
    ]

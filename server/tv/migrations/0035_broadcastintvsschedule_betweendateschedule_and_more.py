# Generated by Django 4.0 on 2023-04-13 21:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('tv', '0034_alter_tv_options'),
    ]

    operations = [
        migrations.CreateModel(
            name='BroadcastInTvsSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('plays_countdown', 'ספירת שידורים לאחור'), ('between_dates', 'בין תאריכים'), ('manual_control', 'שליטה ידנית')], max_length=100)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='BetweenDateSchedule',
            fields=[
                ('broadcastintvsschedule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tv.broadcastintvsschedule')),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField()),
                ('telegram_notification_in', models.DateTimeField(blank=True, null=True)),
                ('telegram_notification_sent', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tv.broadcastintvsschedule',),
        ),
        migrations.CreateModel(
            name='ManualControlSchedule',
            fields=[
                ('broadcastintvsschedule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tv.broadcastintvsschedule')),
                ('is_active_bool', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tv.broadcastintvsschedule',),
        ),
        migrations.CreateModel(
            name='PlaysCoutdownSchedule',
            fields=[
                ('broadcastintvsschedule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='tv.broadcastintvsschedule')),
                ('plays_left', models.IntegerField(default=0)),
                ('telegram_notification_in', models.IntegerField(default=0)),
                ('telegram_notification_sent', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('tv.broadcastintvsschedule',),
        ),
        migrations.CreateModel(
            name='BroadcastInTvs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('duration', models.FloatField(default=20.0)),
                ('order', models.IntegerField(default=10)),
                ('master', models.BooleanField(default=False)),
                ('activeSchedule', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='broadcast_in_tvs', to='tv.broadcastintvsschedule')),
                ('broadcast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='broadcast_in_tvs', to='tv.broadcast')),
                ('tvs', models.ManyToManyField(to='tv.Tv')),
            ],
        ),
    ]
